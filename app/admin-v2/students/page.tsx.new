"use client";

import React, { useState, useMemo, ChangeEvent, useEffect } from "react";
import {
  MdSearch,
  MdFilterList,
  MdDownload,
  MdAdd,
  MdEdit,
  MdDelete,
  MdUpload,
  MdClear,
  MdBadge as MdCertificateBadge,
  MdShoppingCart,
  MdMoreVert,
} from "react-icons/md";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { Pagination } from "@/components/ui/pagination";
import { createStudent, deleteStudent, getStudents } from "@/app/actions/students";

// Define student type based on Prisma model
interface Student {
  id: string;
  user: {
    id: string;
    name: string;
    email: string;
    image: string | null;
  };
  phone: string | null;
  address: string | null;
  createdAt: string;
  _count: {
    certificates: number;
  };
  certificates: {
    id: string;
  }[];
}

interface StudentDisplayData {
  id: string;
  userId: string;
  name: string;
  email: string;
  phone: string | null;
  certificates: number;
  joinedDate: string;
}

// Pagination metadata interface
interface PaginationMeta {
  currentPage: number;
  totalPages: number;
  totalCount: number;
  limit: number;
}

const StudentsPageV2 = () => {
  const [students, setStudents] = useState<StudentDisplayData[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState<"all" | "with-certificates" | "without-certificates">("all");
  const [isAddStudentOpen, setIsAddStudentOpen] = useState(false);
  const [isIssueCertificateOpen, setIsIssueCertificateOpen] = useState(false);
  const [isDeleteStudentOpen, setIsDeleteStudentOpen] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState<StudentDisplayData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Pagination state
  const [paginationMeta, setPaginationMeta] = useState<PaginationMeta>({
    currentPage: 1,
    totalPages: 1,
    totalCount: 0,
    limit: 10,
  });

  const [newStudentData, setNewStudentData] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
  });

  const [certificateData, setCertificateData] = useState({
    title: "",
    file: null as File | null,
  });

  // Fetch students data
  const fetchStudents = async () => {
    setIsLoading(true);
    try {
      const result = await getStudents({
        page: paginationMeta.currentPage,
        limit: paginationMeta.limit,
        search: searchTerm,
      });
      
      // Transform data to display format
      const displayData = result.students.map((student: Student) => ({
        id: student.id,
        userId: student.user.id,
        name: student.user.name || "Unknown",
        email: student.user.email || "No email",
        phone: student.phone,
        certificates: student._count.certificates,
        joinedDate: student.createdAt,
      }));
      
      setStudents(displayData);
      setPaginationMeta({
        currentPage: result.meta.currentPage,
        totalPages: result.meta.totalPages,
        totalCount: result.meta.totalCount,
        limit: result.meta.limit,
      });
      setError(null);
    } catch (err) {
      console.error("Error fetching students:", err);
      setError("Failed to load students. Please try again.");
      setStudents([]);
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch students on mount and when search/pagination changes
  useEffect(() => {
    fetchStudents();
  }, [paginationMeta.currentPage, searchTerm]);

  // Filter students based on criteria
  const filteredStudents = useMemo(() => {
    return students.filter((student) => {
      if (filterStatus === "all") return true;
      return filterStatus === "with-certificates"
        ? student.certificates > 0
        : student.certificates === 0;
    });
  }, [students, filterStatus]);

  const handleClearSearch = () => {
    setSearchTerm("");
    setPaginationMeta(prev => ({ ...prev, currentPage: 1 }));
  };

  const handlePageChange = (page: number) => {
    setPaginationMeta(prev => ({ ...prev, currentPage: page }));
  };

  const handleAddStudentInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewStudentData((prev) => ({ ...prev, [name]: value }));
  };

  const handleOpenAddStudentDialog = () => {
    setNewStudentData({ name: "", email: "", phone: "", address: "" });
    setIsAddStudentOpen(true);
  };

  const confirmAddStudent = async () => {
    setIsLoading(true);
    try {
      // Create a FormData object for the server action
      const formData = new FormData();
      formData.append("name", newStudentData.name);
      formData.append("email", newStudentData.email);
      formData.append("phone", newStudentData.phone || "");
      formData.append("address", newStudentData.address || "");
      
      await createStudent(formData);
      
      // Refetch the students to show the newly created one
      fetchStudents();
      setIsAddStudentOpen(false);
    } catch (error) {
      console.error("Failed to add student:", error);
      alert(`Failed to add student: ${(error as Error).message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCertificateInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value, files } = e.target;
    if (name === "file" && files && files.length > 0) {
      setCertificateData((prev) => ({ ...prev, file: files[0] }));
    } else {
      setCertificateData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleOpenIssueCertificateDialog = (student: StudentDisplayData) => {
    setSelectedStudent(student);
    setCertificateData({ title: "", file: null });
    setIsIssueCertificateOpen(true);
  };

  const confirmIssueCertificate = async () => {
    if (!selectedStudent || !certificateData.file || !certificateData.title) {
      alert("Please fill in all certificate details and select a file.");
      return;
    }
    
    setIsLoading(true);
    try {
      // Will implement certificate creation functionality in a separate PR
      console.log(
        "Issuing certificate:",
        certificateData.title,
        "for",
        selectedStudent.name,
        "with file:",
        certificateData.file.name
      );
      
      // Refetch students to update certificate count
      setTimeout(() => {
        fetchStudents();
        setIsIssueCertificateOpen(false);
        setSelectedStudent(null);
      }, 1000);
    } catch (error) {
      console.error("Failed to issue certificate:", error);
      alert(`Failed to issue certificate: ${(error as Error).message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteStudent = (student: StudentDisplayData) => {
    setSelectedStudent(student);
    setIsDeleteStudentOpen(true);
  };

  const confirmDeleteStudent = async () => {
    if (!selectedStudent) return;
    
    setIsLoading(true);
    try {
      await deleteStudent(selectedStudent.id);
      fetchStudents();
      setIsDeleteStudentOpen(false);
      setSelectedStudent(null);
    } catch (error) {
      console.error("Failed to delete student:", error);
      alert(`Failed to delete student: ${(error as Error).message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6 p-4 md:p-6">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <h1 className="text-2xl font-semibold tracking-tight text-myprimary">
          Manage Students
        </h1>
        <Button
          onClick={handleOpenAddStudentDialog}
          className="flex items-center gap-2"
          disabled={isLoading}
        >
          <MdAdd className="h-5 w-5" /> Add New Student
        </Button>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>All Students</CardTitle>
          <CardDescription>
            View and manage student accounts.
          </CardDescription>
          <div className="mt-4 flex flex-col md:flex-row md:items-center gap-2">
            <div className="relative flex-grow">
              <MdSearch className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
              <Input
                type="search"
                placeholder="Search students (name, email, phone)..."
                value={searchTerm}
                onChange={(e: ChangeEvent<HTMLInputElement>) =>
                  setSearchTerm(e.target.value)
                }
                className="pl-10 w-full md:w-auto md:min-w-[300px]"
                disabled={isLoading}
              />
              {searchTerm && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute right-2 top-1/2 -translate-y-1/2"
                  onClick={handleClearSearch}
                  disabled={isLoading}
                >
                  <MdClear className="h-5 w-5" />
                </Button>
              )}
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="flex items-center gap-2" disabled={isLoading}>
                  <MdFilterList className="h-5 w-5" />
                  Filter:{" "}
                  {filterStatus === "all" 
                    ? "All" 
                    : filterStatus === "with-certificates" 
                      ? "With Certificates" 
                      : "Without Certificates"}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>Filter by Certificates</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => setFilterStatus("all")}>
                  All
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setFilterStatus("with-certificates")}>
                  With Certificates
                </DropdownMenuItem>
                <DropdownMenuItem
                  onClick={() => setFilterStatus("without-certificates")}
                >
                  Without Certificates
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
            <Button 
              variant="outline" 
              className="flex items-center gap-2"
              disabled={isLoading || filteredStudents.length === 0}
            >
              <MdDownload className="h-5 w-5" /> Export All
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex justify-center items-center py-10">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-mysecondary"></div>
            </div>
          ) : error ? (
            <div className="text-center py-10 text-red-500">
              <p>{error}</p>
              <Button 
                onClick={fetchStudents} 
                variant="outline" 
                className="mt-4"
              >
                Retry
              </Button>
            </div>
          ) : filteredStudents.length > 0 ? (
            <>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Phone</TableHead>
                    <TableHead className="text-center">Certificates</TableHead>
                    <TableHead>Joined On</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredStudents.map((student) => (
                    <TableRow key={student.id}>
                      <TableCell className="font-medium">
                        {student.name}
                      </TableCell>
                      <TableCell>{student.email}</TableCell>
                      <TableCell>{student.phone || "N/A"}</TableCell>
                      <TableCell className="text-center">
                        <Link
                          href={`/admin-v2/certificates?studentId=${student.id}`}
                          className="hover:underline flex items-center justify-center"
                        >
                          <MdCertificateBadge className="mr-1 h-4 w-4" />
                          {student.certificates}
                        </Link>
                      </TableCell>
                      <TableCell>
                        {new Date(student.joinedDate).toLocaleDateString()}
                      </TableCell>
                      <TableCell className="text-right">
                        <div className="flex items-center justify-end gap-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleOpenIssueCertificateDialog(student)}
                            className="flex items-center gap-1"
                          >
                            <MdCertificateBadge className="h-4 w-4" />
                            Add Certificate
                          </Button>
                          
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon">
                                <MdMoreVert className="h-5 w-5" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem asChild>
                                <Link
                                  href={`/admin-v2/students/edit/${student.id}`}
                                  className="flex items-center gap-2"
                                >
                                  <MdEdit className="h-4 w-4" /> Edit Details
                                </Link>
                              </DropdownMenuItem>
                              <DropdownMenuItem
                                onClick={() => handleOpenIssueCertificateDialog(student)}
                                className="flex items-center gap-2"
                              >
                                <MdUpload className="h-4 w-4" /> Issue Certificate
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem
                                onClick={() => handleDeleteStudent(student)}
                                className="flex items-center gap-2 text-red-600 hover:!text-red-600"
                              >
                                <MdDelete className="h-4 w-4" /> Delete Student
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              
              <div className="mt-6">
                <Pagination 
                  currentPage={paginationMeta.currentPage}
                  totalPages={paginationMeta.totalPages}
                  onPageChange={handlePageChange}
                  isLoading={isLoading}
                />
              </div>
            </>
          ) : (
            <div className="text-center py-10">
              <p className="text-muted-foreground">
                No students found matching your criteria.
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Add Student Dialog */}
      <Dialog open={isAddStudentOpen} onOpenChange={setIsAddStudentOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Add New Student</DialogTitle>
            <DialogDescription>
              Fill in the details for the new student. Click save when you're
              done.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                name="name"
                value={newStudentData.name}
                onChange={handleAddStudentInputChange}
                className="col-span-3"
                placeholder="Student's full name"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="email" className="text-right">
                Email
              </Label>
              <Input
                id="email"
                name="email"
                type="email"
                value={newStudentData.email}
                onChange={handleAddStudentInputChange}
                className="col-span-3"
                placeholder="student@example.com"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="phone" className="text-right">
                Phone
              </Label>
              <Input
                id="phone"
                name="phone"
                value={newStudentData.phone}
                onChange={handleAddStudentInputChange}
                className="col-span-3"
                placeholder="(Optional)"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="address" className="text-right">
                Address
              </Label>
              <Input
                id="address"
                name="address"
                value={newStudentData.address}
                onChange={handleAddStudentInputChange}
                className="col-span-3"
                placeholder="Student's address"
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsAddStudentOpen(false)}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button onClick={confirmAddStudent} disabled={isLoading}>
              {isLoading ? "Adding..." : "Add Student"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Issue Certificate Dialog */}
      <Dialog
        open={isIssueCertificateOpen}
        onOpenChange={setIsIssueCertificateOpen}
      >
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>
              Issue Certificate to {selectedStudent?.name}
            </DialogTitle>
            <DialogDescription>
              Fill in the certificate details and upload the file.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="certificateTitle" className="text-right">
                Title
              </Label>
              <Input
                id="certificateTitle"
                name="title"
                value={certificateData.title}
                onChange={handleCertificateInputChange}
                className="col-span-3"
                placeholder="e.g., Certificate of Completion"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="certificateFile" className="text-right">
                File
              </Label>
              <Input
                id="certificateFile"
                name="file"
                type="file"
                onChange={handleCertificateInputChange}
                className="col-span-3"
                accept=".pdf,.jpg,.jpeg,.png"
              />
            </div>
            {certificateData.file && (
              <div className="col-span-4 text-sm text-muted-foreground">
                Selected file: {certificateData.file.name}
              </div>
            )}
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setIsIssueCertificateOpen(false);
                setSelectedStudent(null);
              }}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button onClick={confirmIssueCertificate} disabled={isLoading}>
              {isLoading ? "Issuing..." : "Issue Certificate"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Student Confirmation Dialog */}
      <Dialog open={isDeleteStudentOpen} onOpenChange={setIsDeleteStudentOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete the student "
              {selectedStudent?.name}"? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setIsDeleteStudentOpen(false);
                setSelectedStudent(null);
              }}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button variant="destructive" onClick={confirmDeleteStudent} disabled={isLoading}>
              {isLoading ? "Deleting..." : "Delete Student"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default StudentsPageV2;
