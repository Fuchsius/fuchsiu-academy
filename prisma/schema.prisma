datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  username       String?         @unique
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  password       String? // Added for credentials authentication
  role           UserRole        @default(STUDENT)
  isBlocked      Boolean         @default(false) // Added for blocking users
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]
  // Relations to other models
  studentProfile Student?
  orders         Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  STUDENT
  INSTRUCTOR
}

model Student {
  id           String        @id @default(cuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone        String?
  address      String?
  isConfirmed  Boolean       @default(false) // Added for admin confirmation
  certificates Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  issuedDate  DateTime
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String      @id @default(cuid())
  orderId       String      @unique // Custom order ID format like "ORD-20250522-001"
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Decimal     @db.Decimal(10, 2)
  program       String // Mentorship program name
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  paymentDate   DateTime?
  notes         String?     @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
